import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('Missing authorization header');
    }

    const token = authHeader.replace('Bearer ', '');
    const { data: { user }, error: authError } = await supabase.auth.getUser(token);
    
    if (authError || !user) {
      throw new Error('Unauthorized');
    }

    const { session_id, format = 'txt', recipient_email } = await req.json();

    if (!session_id) {
      throw new Error('Missing required field: session_id');
    }

    if (!['pdf', 'docx', 'txt'].includes(format)) {
      throw new Error('Invalid format. Must be pdf, docx, or txt');
    }

    // Get session data
    console.log('Fetching session:', session_id);
    const { data: session, error: sessionError } = await supabase
      .from('sessions')
      .select('generated_note, patient_name, patient_id, scheduled_at, created_at')
      .eq('id', session_id)
      .eq('user_id', user.id)
      .maybeSingle();

    if (sessionError) {
      console.error('Session fetch error:', sessionError);
      throw new Error('Failed to fetch session');
    }

    if (!session) {
      throw new Error('Session not found or access denied');
    }

    if (!session.generated_note) {
      throw new Error('No note available to export. Please generate a note first.');
    }
    
    console.log('Session retrieved successfully');

    // Skip creating export record if table doesn't exist
    let exportRecordId: string | null = null;
    
    try {
      const { data: exportRecord, error: exportError } = await supabase
        .from('exports')
        .insert({
          user_id: user.id,
          session_id,
          format,
          status: 'pending',
        })
        .select()
        .maybeSingle();

      if (!exportError && exportRecord) {
        exportRecordId = exportRecord.id;
        console.log('Export record created:', exportRecordId);
      }
    } catch (err) {
      console.log('Exports table not available, continuing without tracking');
    }

    // Generate export content based on format
    let fileContent: Blob;
    let contentType: string;
    let fileName: string;

    const sessionDate = session.scheduled_at || session.created_at;
    const noteContent = `
Clinical Note Export
===================
Patient: ${session.patient_name || 'N/A'}
MRN: ${session.patient_id || 'N/A'}
Date: ${new Date(sessionDate).toLocaleDateString()}

${session.generated_note}
    `.trim();
    
    console.log('Note content prepared, length:', noteContent.length);

    switch (format) {
      case 'txt':
        fileContent = new Blob([noteContent], { type: 'text/plain' });
        contentType = 'text/plain';
        fileName = `clinical-note-${session_id}.txt`;
        break;
      
      case 'pdf':
        // Create HTML for better formatting
        const htmlContent = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <style>
    body { 
      font-family: Arial, sans-serif; 
      padding: 40px;
      max-width: 800px;
      margin: 0 auto;
      line-height: 1.6;
    }
    h1 { 
      color: #2563eb; 
      border-bottom: 2px solid #2563eb;
      padding-bottom: 10px;
      margin-bottom: 20px;
    }
    .meta {
      background: #f3f4f6;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 20px;
    }
    .meta p {
      margin: 5px 0;
    }
    .content { 
      white-space: pre-wrap; 
      background: #ffffff;
      padding: 20px;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
    }
    .footer {
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid #e5e7eb;
      color: #6b7280;
      font-size: 12px;
    }
  </style>
</head>
<body>
  <h1>Clinical Note</h1>
  <div class="meta">
    <p><strong>Patient:</strong> ${session.patient_name || 'N/A'}</p>
    <p><strong>MRN:</strong> ${session.patient_id || 'N/A'}</p>
    <p><strong>Date:</strong> ${new Date(sessionDate).toLocaleDateString()}</p>
  </div>
  <div class="content">${noteContent.replace(/\n/g, '<br>')}</div>
  <div class="footer">
    Generated by Xorstack Health Model<br>
    AI-assisted documentation - Verify accuracy before clinical use
  </div>
</body>
</html>
        `;
        fileContent = new Blob([htmlContent], { type: 'text/html' });
        contentType = 'text/html';
        fileName = `clinical-note-${session_id}.html`;
        break;
      
      case 'docx':
        // DOCX - use simple text for now
        fileContent = new Blob([noteContent], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
        contentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
        fileName = `clinical-note-${session_id}.docx`;
        break;
      
      default:
        throw new Error('Unsupported format');
    }
    
    console.log('File created:', fileName, fileContent.size, 'bytes');

    // Upload to storage
    const filePath = `${user.id}/${fileName}`;
    console.log('Uploading to storage bucket:', filePath);
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('exported-documents')
      .upload(filePath, fileContent, {
        contentType,
        upsert: true,
      });

    if (uploadError) {
      console.error('Storage upload error:', uploadError);
      throw new Error(`Upload failed: ${uploadError.message}`);
    }

    console.log('File uploaded successfully:', uploadData.path);

    // Update export record if it exists
    if (exportRecordId) {
      await supabase
        .from('exports')
        .update({
          file_path: filePath,
          status: 'completed',
        })
        .eq('id', exportRecordId);
      
      console.log('Export record updated');
    }

    // Generate signed URL (valid for 24 hours)
    const { data: urlData, error: urlError } = await supabase.storage
      .from('exported-documents')
      .createSignedUrl(filePath, 86400);

    if (urlError) {
      console.error('Signed URL error:', urlError);
      throw new Error(`Failed to generate download URL: ${urlError.message}`);
    }

    const file_url = urlData.signedUrl;
    console.log('Signed URL generated successfully');

    // Send email if recipient provided (mock for now)
    if (recipient_email) {
      console.log(`Email would be sent to: ${recipient_email}`);
      console.log('Note: Email service integration required for production');
      // TODO: Integrate with Resend email service
    }

    return new Response(
      JSON.stringify({
        success: true,
        data: {
          url: file_url,
          export_id: exportRecordId,
          file_path: filePath,
        },
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    );

  } catch (error) {
    console.error('Export-note function error:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    return new Response(
      JSON.stringify({
        success: false,
        error: { 
          code: 'EXPORT_ERROR', 
          message: errorMessage 
        },
      }),
      {
        status: errorMessage.includes('Unauthorized') ? 401 : 
                errorMessage.includes('not found') ? 404 : 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
